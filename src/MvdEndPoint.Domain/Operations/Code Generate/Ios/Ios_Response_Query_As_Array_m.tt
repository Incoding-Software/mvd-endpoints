<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.Boolean" name="IsQuery" #>
<#@ parameter type="System.Boolean" name="IsArray" #>
<#@ parameter type="System.Collections.Generic.List<MvdEndPoint.Domain.GetPropertiesFromTypeQuery.Response>" name="Properties" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,string>" name="MappingJsonMethodByType" #>
#import "<#= Name#>.h"
@implementation <#= Name#>
<# foreach(var prop in Properties) { #>
	@synthesize <#= prop.Name#>;    
<# } #>
+(NSMutableArray *)create:(NSDictionary *)json
{   
  NSMutableArray *res = [[NSMutableArray alloc] init];
  for(NSDictionary *innerJson in json)
  {
   <#= Name#> *item = [[<#= Name#> alloc]init];
   <# foreach(var prop in Properties) { #>
     <#if(prop.Attributes.HasFlag(GetPropertiesFromTypeQuery.Response.OfAttributes.IsDateTime)) {#>
	    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        formatter.dateFormat = @"EEE, dd MMM yyyy HH:mm:ss ZZZ";
	    item.<#= prop.Name#> = [formatter dateFromString:@"yyyy-MM-dd'T'HH:mm:ss"];
	  <#}else{#>
        item.<#= prop.Name#> = innerJson[@"<#= prop.Name#>"];    
	  <#}#>
   <# } #> 
   [res addObject:item];
  }    
  return res;
}
-(void)encodeWithCoder:(NSCoder *)encoder {
<# foreach(var prop in Properties) { #>
   [encoder encodeObject:<#= prop.Name#> forKey:@"<#=prop.Name#>"];
<# } #>
}
-(id)initWithCoder:(NSCoder *)decoder {
    self = [super init];
    if (!self) {
        return nil;
    }
<# foreach(var prop in Properties) { #>   
   self.<#= prop.Name#> = [decoder decodeObjectForKey:@"<#= prop.Name#>"];
<# } #>
   return self;
}
@end
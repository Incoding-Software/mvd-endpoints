<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Url" #>
#import "IncodingHelper.h"

@implementation IncodingHelper
+(id)sharedInstance
{
  static dispatch_once_t pred;
  static IncodingHelper *sharedInstance = nil;
  dispatch_once(&pred, ^{
   sharedInstance = [[IncodingHelper alloc] init];
  });
  return sharedInstance;
}

-(void)refreshSession
{
    NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];    
    sessionConfig.timeoutIntervalForRequest = 30.0;
    sessionConfig.timeoutIntervalForResource = 30.0;
    sessionConfig.HTTPMaximumConnectionsPerHost = 15;
    
    _session = [NSURLSession sessionWithConfiguration:sessionConfig delegate:self delegateQueue:nil];
}

-(void)execute:(NSString *) requestString type:(NSString *)type done:(IncodingDone)done
{  
  NSString *urlString = [NSString stringWithFormat:@"<#=Url#>/%@?%@",type,requestString];
  NSURL *url = [NSURL URLWithString:urlString];

  if(!_session)
 {
   [self refreshSession];
 }

 NSURLSessionDataTask *getTask = [_session dataTaskWithURL:url completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                   NSError *jsonError;                                          
                                   NSDictionary *result = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&jsonError];
                                   done(result);     }];    
 [getTask resume];
}
@end
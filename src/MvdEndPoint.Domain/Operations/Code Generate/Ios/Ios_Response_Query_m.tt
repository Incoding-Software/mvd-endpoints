<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Properties" #>
#import "<#= Name#>.h"
@implementation <#= Name#>
<# foreach(var prop in Properties) { #>
	@synthesize <#= prop.Name#>;    
<# } #>      
+(<#= Name #> *)create:(NSDictionary *)json
{   
  <#= Name#> *res = [[<#= Name#> alloc] init];
  <# foreach(var prop in Properties) { #>    	
     <#if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsDateTime)) {#>
	    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        formatter.dateFormat = @"EEE, dd MMM yyyy HH:mm:ss ZZZ";
	    res.<#= prop.Name#> = [formatter dateFromString:@"yyyy-MM-dd'T'HH:mm:ss"];
	  <#}else{#>
        res.<#= prop.Name#> = json[@"<#= prop.Name#>"];    
	  <#}#>  
  <# } #> 
  return res;
}
-(void)encodeWithCoder:(NSCoder *)encoder{
<# foreach(var prop in Properties) { #>
   [encoder encodeObject:<#= prop.Name#> forKey:@"<#=prop.Name#>"];
<# } #>
}
-(id)initWithCoder:(NSCoder *)decoder{
    self = [super init];
    if (!self) {
        return nil;
    }
<# foreach(var prop in Properties) { #>   
   self.<#= prop.Name#> = [decoder decodeObjectForKey:@"<#= prop.Name#>"];
<# } #>
  return self;
}
@end
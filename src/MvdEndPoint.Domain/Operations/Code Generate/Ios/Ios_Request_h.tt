<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.String" name="Response" #>
<#@ parameter type="System.Boolean" name="IsArray" #>
<#@ parameter type="System.Boolean" name="IsImage" #>
<#@ parameter type="System.Boolean" name="IsQuery" #>
<#@ parameter type="System.Collections.Generic.List<MvdEndPoint.Domain.GetPropertiesByTypeQuery.Response>" name="Properties" #>
#import "<#= Response#>.h"
typedef void (^Success<#=Name#>)(<#if(IsImage){#>UIImage<#}else{#><#if(IsArray){#>NSMutableArray<#}else{ #><#= Response#><#} #><#} #> *result);
<#if (!IsQuery){#>
typedef void (^Error<#=Name#>)(NSMutableArray *result);
<#}#>
@interface <#= Name #> : NSObject
 <# foreach(var prop in Properties) { #>
 <#if(prop.IsCanNull){ #>
@property (strong, nonatomic) <#= prop.Type#> *<#= prop.Name#>;    	  
<#}else{#>
@property (assign, nonatomic) <#= prop.Type#> <#= prop.Name#>;    	  
<#}#>
 <# } #>
<#if(IsQuery){#>
-(void)on:(Success<#=Name#>)success;
<#}else{#>
-(void)on:(Success<#=Name#>)success error:(Error<#=Name#>)error;
<#}#>
@end

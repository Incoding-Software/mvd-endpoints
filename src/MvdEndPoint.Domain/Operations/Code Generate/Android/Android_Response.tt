<#@ template language="C#" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.Boolean" name="IsArray" #>
<#@ parameter type="System.Boolean" name="IsQuery" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Properties" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,string>" name="MappingJsonMethodByType" #>
<#@ parameter type="System.Collections.Generic.List<string>" name="Nested" #>
package <#= Namespace #>;

import org.json.JSONException;
import org.json.JSONObject;	
import java.text.ParseException;
import org.json.JSONArray;

public class <#= Name #> {

    <#foreach(var nes in Nested) { #>
      <#=nes #>
    <#}#>
    
<# if(IsQuery) { #>
    <# foreach(var prop in Properties) { #>
    public <#= prop.Type #><# if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)) {#>[]<#}#> <#= prop.Name #>;
    <# } #>        
         public static <#= Name #>[] Create(JSONObject result) throws JSONException, ModelStateException, ParseException  {     
		     IncodingHelper.Verify(result);
			 if(result.isNull("data"))
               return new  <#= Name #>[0];

		<# if(IsArray) {#>
             JSONArray data = result.getJSONArray("data");
     		 int length = data.length();
             <#= Name #>[] res = new <#= Name #>[length];
             for (int i = 0; i < length; i++) {
                 JSONObject item = data.getJSONObject(i);		  
                 <#= Name #> response = new <#= Name #>();
                 <# foreach(var prop in Properties) { #>
                    <#if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsEnum)) { #>
			    response.<#= prop.Name #> = <#=prop.Type#>.valueOf(item.getInt("<#= prop.Name #>"));
			        <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsDateTime)) { #>
                response.<#= prop.Name #> = IncodingHelper.getDate(item.getString("<#= prop.Name #>"));
                    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsClass)) { #>
                response.<#= prop.Name #> = new <#= prop.Name #>(item.getJSONObject("<#= prop.Name #>"));
				    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)) { #>
				JSONArray <#= prop.Name #>AsArray = item.getJSONArray("<#= prop.Name #>");
			    response.<#= prop.Name #> = new <#=prop.Type#>[<#= prop.Name #>AsArray.length()];
			    for(int <#= prop.Name #>Oni = 0;<#= prop.Name #>Oni < <#= prop.Name #>AsArray.length();<#= prop.Name #>Oni++)
			    {
			    response.<#= prop.Name #>[<#= prop.Name #>Oni]	= <#= prop.Name #>AsArray.<#= MappingJsonMethodByType[prop.Type] #>(<#= prop.Name #>Oni);
			    }
					<# } else { #>
			    response.<#= prop.Name #> = item.<#= MappingJsonMethodByType[prop.Type] #>("<#= prop.Name #>");
			        <# } #>
                 <# } #> 
                 res[i] = response;
             }	    
     		return res;   
	    <# } else { #>  
		     JSONObject data = new JSONObject(result.getString("data"));    
	         <#= Name #> res = new <#= Name #>();
             <# foreach(var prop in Properties) { #>
                    <#if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsEnum)) { #>
			    response.<#= prop.Name #> = <#=prop.Type#>.valueOf(data.getInt("<#= prop.Name #>"));
				    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)) { #>
				JSONArray <#= prop.Name #>AsArray = item.getJSONArray("<#= prop.Name #>");
			    response.<#= prop.Name #> = new <#=prop.Type#>[<#= prop.Name #>AsArray.length()];
			    for(int <#= prop.Name #>Oni = 0;<#= prop.Name #>Oni < <#= prop.Name #>AsArray.length();<#= prop.Name #>Oni++)
			    {
			    response.<#= prop.Name #>[<#= prop.Name #>Oni]	= <#= prop.Name #>AsArray.<#= MappingJsonMethodByType[prop.Type] #>(<#= prop.Name #>Oni);
			    }
				    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsDateTime)) { #>
                response.<#= prop.Name #> = IncodingHelper.getDate(data.getString("<#= prop.Name #>"));
                    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsClass)) { #>
                response.<#= prop.Name #> = new <#= prop.Name #>(item.getJSONObject("<#= prop.Name #>"));
			        <# } else { #>
			    response.<#= prop.Name #> = data.<#= MappingJsonMethodByType[prop.Type] #>("<#= prop.Name #>");
			        <# } #>
                 <# } #> 
		     return res;   
	    <# } #>  
         }   

<# } else { #>
    public Object data;

    public static <#= Name #> Create(JSONObject result) throws JSONException, ModelStateException, ParseException {
	    IncodingHelper.Verify(result);
        <#= Name #> response = new <#= Name #>();
        response.data = result.isNull("data") ? null : result.get("data");
        return response;
    }
<# } #> 	                                                           
}
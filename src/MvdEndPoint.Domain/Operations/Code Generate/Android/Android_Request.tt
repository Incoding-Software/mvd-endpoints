<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.String" name="Listener" #>
<#@ parameter type="System.String" name="Request" #>
<#@ parameter type="System.String" name="Response" #>
<#@ parameter type="System.Boolean" name="HasRequest" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Package" #>
<#@ parameter type="System.String" name="Type" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Properties" #>
package <#= Package #>;

import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import android.content.Context;
import android.os.AsyncTask;
import <#= Namespace #>.Incoding.ModelStateException;
import <#= Namespace #>.Incoding.IncodingHelper;
import java.util.HashMap;

public class <#= Name #> extends AsyncTask<String, Integer, String> {

    <# foreach(var pair in Properties) { #>
    public <#= pair.Type #><# if(pair.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)){#>[]<#}#> <#= pair.Name #>;
    <# } #>   

   public java.util.HashMap<String, Object> GetParameters(Integer index) {
	java.util.HashMap<String, Object> parameters = new java.util.HashMap<String, Object>();	
	parameters.put("incTypes","<#= Type #>");
	<# foreach(var pair in Properties) { #>
	<# if(pair.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsCanNull)) { #> if (this.<#= pair.Name #> != null) <# } #>
    parameters.put(index == -1 ? "<#= pair.Name #>" : String.format("[%s].<#= pair.Name #>", index),this.<#= pair.Name #>);
    <# } #>   
	return parameters;
   } 

    private Context context;

    private <#= Listener #> listener;
    	
	public <#= Name #>(Context context) {
		this.context = context;		
	}
		
	@Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
        try {
            listener.Success( <#=Response#>.Create(new JSONObject(s)) );
        } catch (Exception e) {
            e.printStackTrace();
        } catch (ModelStateException e) {
            listener.Error(e.getState());
        }
    }

	@Override
    protected String doInBackground(String... strings) {
        try {
		   
		    HashMap<String, Object> params = new HashMap<String, Object>();			
			String type = "<#=Type#>";
			
            HttpResponse response = IncodingHelper.Execute(context, true,"<#=Type#>",this.GetParameters(-1));
			return EntityUtils.toString(response.getEntity());
			        
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    public void On(<#= Listener #> on)
    {
        listener = on;
        execute();
    }
}
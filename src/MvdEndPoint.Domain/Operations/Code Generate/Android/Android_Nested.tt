<#@ template language="C#" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Properties" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,string>" name="MappingJsonMethodByType" #>
import <#= Namespace #>.IncodingHelper;
import <#= Namespace #>.ModelStateException;

public class <#= Name #> {
    
    <# foreach(var prop in Properties) { #>
       public <#= prop.Type #><# if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)) {#>[]<#}#> <#= prop.Name #>;
    <# } #>   

    public <#= Name #>(JSONObject item) throws JSONException {
    <# foreach(var prop in Properties) { #>
        <#if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsEnum)) { #>
	      this.<#= prop.Name #> = <#=prop.Type#>.valueOf(item.getInt("<#= prop.Name #>"));
	    <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsDateTime)) { #>
          this.<#= prop.Name #> = IncodingHelper.getDate(item.getString("<#= prop.Name #>"));
        <# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsClass)) { #>
          this.<#= prop.Name #> = new <#= prop.Name #>(item.getJSONObject("<#= prop.Name #>"));
		<# } else if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)) { #>
		  JSONArray <#= prop.Name #>AsArray = item.getJSONArray("<#= prop.Name #>");
	      this.<#= prop.Name #> = new <#=prop.Type#>[<#= prop.Name #>AsArray.length()];
	      for(int <#= prop.Name #>Oni = 0;<#= prop.Name #>Oni < <#= prop.Name #>AsArray.length();<#= prop.Name #>Oni++)
	      {
	       this.<#= prop.Name #>[<#= prop.Name #>Oni]	= <#= prop.Name #>AsArray.<#= MappingJsonMethodByType[prop.Type] #>(<#= prop.Name #>Oni);
	      }
	    <# } else { #>
	    this.<#= prop.Name #> = item.<#= MappingJsonMethodByType[prop.Type] #>("<#= prop.Name #>");
	    <# } #>
    <# } #> 
    }  
}
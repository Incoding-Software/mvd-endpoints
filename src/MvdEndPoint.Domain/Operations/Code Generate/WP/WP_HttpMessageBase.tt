<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="System.String" name="Url" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.Boolean" name="IsNotifyPropertyChanged" #>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Incoding.Extensions;
using JetBrains.Annotations;
using Newtonsoft.Json;

namespace <#=Namespace#>
{
    public class HttpMessageBase<#if(IsNotifyPropertyChanged){#>:INotifyPropertyChanged<#}#>
    {	    
        public class IncodingResult<T>
        {
            public bool success;

            public T data;
        }

		public class ModelState
        {
            public string name;

            public string errorMessage;

            public bool isValid;
        }

		public class HttpPostedFileBase
        {
            public byte[] Content { get; set; }

            public string FileName { get; set; }
        }

        public static Action<object, HttpStatusCode> OnError = (o, code) =>
                                                               {
                                                                   var message = string.Format("Http request finished with different ({0}) http status OK. Inner data : {1}", code.ToString("G"), o != null ? o.ToString() : "");
                                                                   throw new ApplicationException(message);
                                                               };

		public static Dictionary<string, string> Headers = new Dictionary<string, string>()
                                                           { { "X-Requested-With", "XMLHttpRequest" } };

        public static string Cookie { get; set; }

        protected async Task PostAwait<T>(bool isCommand, Action<T> onSuccess, Action<object, HttpStatusCode> onError, Action<ModelState[]> onValidation, Dictionary<string, object> postData)
        {
            string url = string.Format("<#=Url#>/Dispatcher/{0}", isCommand ? "Push" : "Query");
            string response = await post(url, postData);
            IncodingResult<object> result = JsonConvert.DeserializeObject<IncodingResult<object>>(response);
            if (result.statusCode == HttpStatusCode.OK)
            {
                if (result.success)
                {
                    IncodingResult<T> deserializeObject = JsonConvert.DeserializeObject<IncodingResult<T>>(response);
                    onSuccess(deserializeObject.data);
                }
                else
                {
                    var modelState = JsonConvert.DeserializeObject<IncodingResult<ModelState[]>>(response);
                    if (modelState.data != null && modelState.data.Any())
                    {
                        if (onValidation == null)
                            throw new ArgumentNullException("onValidation", "Response have validation errors but onValidation behavior is was missed");
                        onValidation(modelState.data);
                    }
                }
            }
            else
            {
                var actual = onError ?? OnError;
                actual(result.data, result.statusCode);
            }
        }

        async Task<string> GetWebRequestCallback(HttpWebRequest request)
        {
            var task = Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, null);
            var responseObject = await task.ContinueWith(r => r.Result);
            if (Cookie == null && request.CookieContainer != null && request.CookieContainer.Count != 0)
                Cookie = request.CookieContainer.GetCookieHeader(request.RequestUri);
            var responseStream = responseObject.GetResponseStream();
            var sr = new StreamReader(responseStream);
            string received = await sr.ReadToEndAsync();

            return received;
        }

        async Task<string> post(string url, Dictionary<string, object> postdata)
        {
            var wr = WebRequest.Create(new Uri(url)) as HttpWebRequest;
            string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");
            byte[] boundarybytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "\r\n");
            wr.Method = "POST";
            wr.Timeout = (int)new TimeSpan(0, 0, 5).TotalMilliseconds;
            wr.ContentType = "multipart/form-data; boundary=" + boundary;
            foreach (var header in Headers)
                wr.Headers.Add(header.Key, header.Value);
            wr.CookieContainer = new CookieContainer();

            Stream rs = wr.GetRequestStream();

            foreach (var item in postdata)
            {
                rs.Write(boundarybytes, 0, boundarybytes.Length);

                var value = item.Value;

                if (value != null && value.GetType() == typeof(byte[]))
                {
                    value = new HttpPostedFileBase()
                            {
                                    Content = (byte[])value,
                                    FileName = Guid.NewGuid().ToString()
                            };
                }

                if (value != null && value.GetType() == typeof(HttpPostedFileBase))
                {
                    var postFile = (HttpPostedFileBase)value;

                    string header = string.Format("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n", item.Key, postFile.FileName, "");
                    byte[] headerbytes = Encoding.UTF8.GetBytes(header);
                    rs.Write(headerbytes, 0, headerbytes.Length);
                    rs.Write(postFile.Content, 0, postFile.Content.Length);
                    byte[] trailer = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");
                    rs.Write(trailer, 0, trailer.Length);
                }
                else
                {
                    string formitem = string.Format("Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}", item.Key, value);
                    byte[] formitembytes = Encoding.UTF8.GetBytes(formitem);
                    rs.Write(formitembytes, 0, formitembytes.Length);
                }
            }
            rs.Write(boundarybytes, 0, boundarybytes.Length);
            rs.Close();

            string response = await GetWebRequestCallback(wr);

            return response;
        }


		
		<#if(IsNotifyPropertyChanged){#>
		public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));      
        }
		<#}#>
    }
}


<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Incoding.Extensions" #>
<#@ parameter type="Incoding.Endpoint.GetMetaFromTypeQuery.Response" name="Meta" #>
<#@ parameter type="System.Boolean" name="IsNotifyPropertyChanged" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Properties" #>
<#@ parameter type="System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>" name="Response" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<Incoding.Endpoint.GetPropertiesQuery.Response>>" name="InnerResponses" #>

using System;
using System.Text;
using System.Collections.Generic;
using System.Net;
 using System.Threading.Tasks;

namespace <#=Meta.Namespace#>
{
	public class <#=Meta.Name#>:HttpMessageBase
	{
		 
		 <# foreach(var pair in Properties) { #>
		 <#if(IsNotifyPropertyChanged){#>
				 private <#=pair.Type#> _<#= pair.Name #>;
		public <#=pair.Type#> <#= pair.Name #>
		{
			get { return this._<#= pair.Name #>; }
			set
			{
				this._<#= pair.Name #> = value;
				OnPropertyChanged();
			}
		}
		 <#}else{#>
		public <#= pair.Type #><# if(pair.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)){#>[]<#}#> <#= pair.Name #> {get;set;}
		<#}#>
		 <# } #>   
		 

		public class Response
		{		  
		<# foreach(var pair in InnerResponses) { #>
		   public class <#=pair.Key#>
		   {
			<# foreach(var prop in pair.Value) { #>
			public <#= prop.Type #><# if(prop.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)){#>[]<#}#> <#= prop.Name #> {get;set;}
			<# } #>
		   }        
		<# } #>  
						 
		<# foreach(var pair in Response) { #>
		public <#= pair.Type #><# if(pair.Attributes.HasFlag(GetPropertiesQuery.Response.OfAttributes.IsArray)){#>[]<#}#> <#= pair.Name #> {get;set;}
		 <# } #>  

		}

		 public Dictionary<string, object> GetPostData()
        {
            var postData = new Dictionary<string, object>();
			postData.Add("incTypes", "<#=Meta.Name#>");
			<# foreach(var pair in Properties) { #>
				postData.Add("<#=pair.Name#>", this.<#=pair.Name#>);			             
			<# } #>  
			return postData;
        }

		public async void On(Action<Response<# if(Meta.ResponseAsArray){#>[]<#}#>> onSuccess, Action<object, HttpStatusCode> onError = null, Action<ModelState[]> onValidation = null)
		{
			await PostAwait(false, onSuccess, onError, onValidation, GetPostData());
		}

		public Task<Response<# if(Meta.ResponseAsArray){#>[]<#}#>> Get(Action<object, HttpStatusCode> onError = null, Action<ModelState[]> onValidation = null)
        {
            return PostAwait<Response<# if(Meta.ResponseAsArray){#>[]<#}#>>(false, onError, onValidation, GetPostData());
        }
	}
}


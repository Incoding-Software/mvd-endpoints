// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Incoding.Endpoint.Operations.Code_Generate.WP
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Incoding.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class WP_HttpMessageBase : WP_HttpMessageBaseBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Incoding.Extensions;
using JetBrains.Annotations;
using Newtonsoft.Json;

namespace ");
            
            #line 25 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class HttpMessageBase");
            
            #line 27 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
if(IsNotifyPropertyChanged){
            
            #line default
            #line hidden
            this.Write(":INotifyPropertyChanged");
            
            #line 27 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
}
            
            #line default
            #line hidden
            this.Write("    {\t    \r\n        public class IncodingResult<T>\r\n        {\r\n            public" +
                    " bool success;\r\n\r\n            public T data;\r\n        }\r\n\r\n\t\tpublic class ModelS" +
                    "tate\r\n        {\r\n            public string name;\r\n\r\n            public string er" +
                    "rorMessage;\r\n\r\n            public bool isValid;\r\n        }\r\n\r\n\t\tpublic class Htt" +
                    "pPostedFileBase\r\n        {\r\n            public byte[] Content { get; set; }\r\n\r\n " +
                    "           public string FileName { get; set; }\r\n        }\r\n\r\n        public sta" +
                    "tic Action<object, HttpStatusCode> OnError = (o, code) =>\r\n                     " +
                    "                                          {\r\n                                   " +
                    "                                var message = string.Format(\"Http request finish" +
                    "ed with different ({0}) http status OK. Inner data : {1}\", code.ToString(\"G\"), o" +
                    " != null ? o.ToString() : \"\");\r\n                                                " +
                    "                   throw new ApplicationException(message);\r\n                   " +
                    "                                            };\r\n\r\n\t\tpublic static Dictionary<str" +
                    "ing, string> Headers = new Dictionary<string, string>()\r\n                       " +
                    "                                    { { \"X-Requested-With\", \"XMLHttpRequest\" } }" +
                    ";\r\n\r\n        public static string Cookie { get; set; }\r\n\r\n        protected asyn" +
                    "c Task PostAwait<T>(bool isCommand, Action<T> onSuccess, Action<object, HttpStat" +
                    "usCode> onError, Action<ModelState[]> onValidation, Dictionary<string, object> p" +
                    "ostData)\r\n        {\r\n            string url = string.Format(\"");
            
            #line 65 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Url));
            
            #line default
            #line hidden
            this.Write("/Dispatcher/{0}\", isCommand ? \"Push\" : \"Query\");\r\n            string response = a" +
                    "wait post(url, postData);\r\n            IncodingResult<object> result = JsonConve" +
                    "rt.DeserializeObject<IncodingResult<object>>(response);\r\n            if (result." +
                    "statusCode == HttpStatusCode.OK)\r\n            {\r\n                if (result.succ" +
                    "ess)\r\n                {\r\n                    IncodingResult<T> deserializeObject" +
                    " = JsonConvert.DeserializeObject<IncodingResult<T>>(response);\r\n                " +
                    "    onSuccess(deserializeObject.data);\r\n                }\r\n                else\r" +
                    "\n                {\r\n                    var modelState = JsonConvert.Deserialize" +
                    "Object<IncodingResult<ModelState[]>>(response);\r\n                    if (modelSt" +
                    "ate.data != null && modelState.data.Any())\r\n                    {\r\n             " +
                    "           if (onValidation == null)\r\n                            throw new Argu" +
                    "mentNullException(\"onValidation\", \"Response have validation errors but onValidat" +
                    "ion behavior is was missed\");\r\n                        onValidation(modelState.d" +
                    "ata);\r\n                    }\r\n                }\r\n            }\r\n            else" +
                    "\r\n            {\r\n                var actual = onError ?? OnError;\r\n             " +
                    "   actual(result.data, result.statusCode);\r\n            }\r\n        }\r\n\r\n        " +
                    "async Task<string> GetWebRequestCallback(HttpWebRequest request)\r\n        {\r\n   " +
                    "         var task = Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse" +
                    ", request.EndGetResponse, null);\r\n            var responseObject = await task.Co" +
                    "ntinueWith(r => r.Result);\r\n            if (Cookie == null && request.CookieCont" +
                    "ainer != null && request.CookieContainer.Count != 0)\r\n                Cookie = r" +
                    "equest.CookieContainer.GetCookieHeader(request.RequestUri);\r\n            var res" +
                    "ponseStream = responseObject.GetResponseStream();\r\n            var sr = new Stre" +
                    "amReader(responseStream);\r\n            string received = await sr.ReadToEndAsync" +
                    "();\r\n\r\n            return received;\r\n        }\r\n\r\n        async Task<string> pos" +
                    "t(string url, Dictionary<string, object> postdata)\r\n        {\r\n            var w" +
                    "r = WebRequest.Create(new Uri(url)) as HttpWebRequest;\r\n            string bound" +
                    "ary = \"---------------------------\" + DateTime.Now.Ticks.ToString(\"x\");\r\n       " +
                    "     byte[] boundarybytes = Encoding.ASCII.GetBytes(\"\\r\\n--\" + boundary + \"\\r\\n\"" +
                    ");\r\n            wr.Method = \"POST\";\r\n            wr.Timeout = (int)new TimeSpan(" +
                    "0, 0, 5).TotalMilliseconds;\r\n            wr.ContentType = \"multipart/form-data; " +
                    "boundary=\" + boundary;\r\n            foreach (var header in Headers)\r\n           " +
                    "     wr.Headers.Add(header.Key, header.Value);\r\n            wr.CookieContainer =" +
                    " new CookieContainer();\r\n\r\n            Stream rs = wr.GetRequestStream();\r\n\r\n   " +
                    "         foreach (var item in postdata)\r\n            {\r\n                rs.Write" +
                    "(boundarybytes, 0, boundarybytes.Length);\r\n\r\n                var value = item.Va" +
                    "lue;\r\n\r\n                if (value != null && value.GetType() == typeof(byte[]))\r" +
                    "\n                {\r\n                    value = new HttpPostedFileBase()\r\n      " +
                    "                      {\r\n                                    Content = (byte[])v" +
                    "alue,\r\n                                    FileName = Guid.NewGuid().ToString()\r" +
                    "\n                            };\r\n                }\r\n\r\n                if (value " +
                    "!= null && value.GetType() == typeof(HttpPostedFileBase))\r\n                {\r\n  " +
                    "                  var postFile = (HttpPostedFileBase)value;\r\n\r\n                 " +
                    "   string header = string.Format(\"Content-Disposition: form-data; name=\\\"{0}\\\"; " +
                    "filename=\\\"{1}\\\"\\r\\nContent-Type: {2}\\r\\n\\r\\n\", item.Key, postFile.FileName, \"\")" +
                    ";\r\n                    byte[] headerbytes = Encoding.UTF8.GetBytes(header);\r\n   " +
                    "                 rs.Write(headerbytes, 0, headerbytes.Length);\r\n                " +
                    "    rs.Write(postFile.Content, 0, postFile.Content.Length);\r\n                   " +
                    " byte[] trailer = Encoding.ASCII.GetBytes(\"\\r\\n--\" + boundary + \"--\\r\\n\");\r\n    " +
                    "                rs.Write(trailer, 0, trailer.Length);\r\n                }\r\n      " +
                    "          else\r\n                {\r\n                    string formitem = string." +
                    "Format(\"Content-Disposition: form-data; name=\\\"{0}\\\"\\r\\n\\r\\n{1}\", item.Key, valu" +
                    "e);\r\n                    byte[] formitembytes = Encoding.UTF8.GetBytes(formitem)" +
                    ";\r\n                    rs.Write(formitembytes, 0, formitembytes.Length);\r\n      " +
                    "          }\r\n            }\r\n            rs.Write(boundarybytes, 0, boundarybytes" +
                    ".Length);\r\n            rs.Close();\r\n\r\n            string response = await GetWeb" +
                    "RequestCallback(wr);\r\n\r\n            return response;\r\n        }\r\n\r\n\r\n\t\t\r\n\t\t");
            
            #line 163 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
if(IsNotifyPropertyChanged){
            
            #line default
            #line hidden
            this.Write(@"		public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));      
        }
		");
            
            #line 171 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\WP\WP_HttpMessageBase.tt"

private string _UrlField;

/// <summary>
/// Access the Url parameter of the template.
/// </summary>
private string Url
{
    get
    {
        return this._UrlField;
    }
}

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}

private bool _IsNotifyPropertyChangedField;

/// <summary>
/// Access the IsNotifyPropertyChanged parameter of the template.
/// </summary>
private bool IsNotifyPropertyChanged
{
    get
    {
        return this._IsNotifyPropertyChangedField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool UrlValueAcquired = false;
if (this.Session.ContainsKey("Url"))
{
    this._UrlField = ((string)(this.Session["Url"]));
    UrlValueAcquired = true;
}
if ((UrlValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Url");
    if ((data != null))
    {
        this._UrlField = ((string)(data));
    }
}
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    this._NamespaceField = ((string)(this.Session["Namespace"]));
    NamespaceValueAcquired = true;
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        this._NamespaceField = ((string)(data));
    }
}
bool IsNotifyPropertyChangedValueAcquired = false;
if (this.Session.ContainsKey("IsNotifyPropertyChanged"))
{
    this._IsNotifyPropertyChangedField = ((bool)(this.Session["IsNotifyPropertyChanged"]));
    IsNotifyPropertyChangedValueAcquired = true;
}
if ((IsNotifyPropertyChangedValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IsNotifyPropertyChanged");
    if ((data != null))
    {
        this._IsNotifyPropertyChangedField = ((bool)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class WP_HttpMessageBaseBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Name" #>
<#@ parameter type="System.String" name="Listener" #>
<#@ parameter type="System.String" name="Request" #>
<#@ parameter type="System.String" name="Response" #>
<#@ parameter type="System.String" name="Url" #>
<#@ parameter type="System.Boolean" name="IsGet" #>
<#@ parameter type="System.Boolean" name="HasRequest" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,string>" name="PropertiesByResponse" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string,string>" name="PropertiesByRequest" #>

import android.os.AsyncTask;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.IOException;

public class <#= Name #> extends AsyncTask<String, Integer, String> {

    public <#= Listener #> listener;

    <# if(HasRequest) { #>
private <#= Request #> request;
	<# } #> 

    public <#= Name #>(<# if(HasRequest) { #><#= Request #> request <# } #>  ) {
    <# if(HasRequest) { #>
	this.request = request;
    <# } #> 
    }

    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);


        try {
            <#= Response #> result = new <#= Response #>();

            JSONObject jsonObject = new JSONObject(s);
            JSONObject data = new JSONObject(jsonObject.getString("data"));
                <# foreach(var pair in PropertiesByResponse) { #>
             result.<#= pair.Key #> = data.getString("<#= pair.Key #>");
                <# } #>   

            listener.Success(result);

        } catch (JSONException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

    }


    @Override
    protected String doInBackground(String... strings) {        		
		<#  if (IsGet) {  #>

		<#  if (HasRequest) {  #>
		String uri = String.format("<#= Url #>"<# foreach(var pair in PropertiesByRequest) { #> ,request.<#= pair.Key #> <# } #>); 
        <# } #>
		<#  if (!HasRequest) {  #>
		String uri = "<#= Url #>";
        <# } #>
		
        HttpGet http = new HttpGet(uri);         
        <# } #>

        <# if (!IsGet) {  #>
        HttpPost http = new HttpPost(<#= Url #>);
     	http.setHeader("Content-Type", "application/x-www-form-urlencoded");

	    List<NameValuePair> parameters = new ArrayList<NameValuePair>();
          <# foreach(var pair in PropertiesByRequest) { #>
        parameters.add(new BasicNameValuePair(<#= pair.Key #>, String.valueOf(response.<#= pair.Key #>)));
          <# } #>   
        http.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
        <# } #>
    
        try {
            HttpResponse response = new DefaultHttpClient().execute(http);
            String json = EntityUtils.toString(response.getEntity());
            return json;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }


    public void On(<#= Listener #> on)
    {
        listener = on;
        execute();
    }
}
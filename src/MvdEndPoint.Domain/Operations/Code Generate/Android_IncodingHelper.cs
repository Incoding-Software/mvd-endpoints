// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MvdEndPoint.Domain.Operations.Code_Generate
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\Android_IncodingHelper.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class Android_IncodingHelper : Android_IncodingHelperBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("package ");
            
            #line 2 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\Android_IncodingHelper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(".Incoding;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPrefe" +
                    "rences;\r\nimport android.preference.PreferenceManager;\r\nimport org.apache.http.He" +
                    "ader;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.client.metho" +
                    "ds.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache." +
                    "http.entity.mime.HttpMultipartMode;\r\nimport org.apache.http.entity.mime.Multipar" +
                    "tEntityBuilder;\r\nimport org.apache.http.entity.mime.content.ByteArrayBody;\r\nimpo" +
                    "rt org.apache.http.entity.mime.content.ContentBody;\r\nimport org.apache.http.enti" +
                    "ty.mime.content.StringBody;\r\nimport org.apache.http.impl.client.DefaultHttpClien" +
                    "t;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json." +
                    "JSONObject;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingExce" +
                    "ption;\r\nimport java.net.URLEncoder;\r\nimport java.text.ParseException;\r\nimport ja" +
                    "va.text.SimpleDateFormat;\r\nimport java.util.HashMap;\r\nimport java.util.Map.Entry" +
                    ";\r\n\r\npublic class IncodingHelper {\r\n\r\n\r\n\tpublic static String ToValue(Object ob)" +
                    " throws UnsupportedEncodingException {\r\n\t\tif(ob instanceof java.util.Date)\r\n\t\t\tr" +
                    "eturn new SimpleDateFormat(\"dd/MM/yyyy\").format(ob);\r\n\t\t\t\t\r\n\t\treturn String.valu" +
                    "eOf(ob);\r\n\t}\r\n\t\r\n\tpublic static ContentBody ToPart(Object ob) throws Unsupported" +
                    "EncodingException {\r\n\t\tif(ob instanceof java.util.Date)\r\n\t\t\treturn new StringBod" +
                    "y(new SimpleDateFormat(\"dd/MM/yyyy\").format(ob));\r\n\t\tif(ob instanceof Byte[])\r\n\t" +
                    "\t\treturn new ByteArrayBody((byte[]) ob,\"file\");\r\n\t\t\r\n\t\treturn new StringBody(Str" +
                    "ing.valueOf(ob));\r\n\t}\r\n\r\n\t\r\n    public static void Verify(JSONObject result) thr" +
                    "ows JSONException, ModelStateException {\r\n        if (!result.getBoolean(\"succes" +
                    "s\")) {\r\n            JSONArray errors = result.isNull(\"data\") ? new JSONArray() :" +
                    " result.getJSONArray(\"data\");\r\n            JsonModelStateData[] state = new Json" +
                    "ModelStateData[errors.length()];\r\n            for (int i = 0; i < errors.length(" +
                    "); i++) {\r\n                JSONObject itemError = errors.getJSONObject(i);\r\n    " +
                    "            JsonModelStateData jsonModelStateData = new JsonModelStateData();\r\n " +
                    "               jsonModelStateData.errorMessage = itemError.getString(\"errorMessa" +
                    "ge\");\r\n                jsonModelStateData.isValid = itemError.getBoolean(\"isVali" +
                    "d\");\r\n                jsonModelStateData.name = itemError.getString(\"name\");\r\n  " +
                    "              state[i] = jsonModelStateData;\r\n            }\r\n            throw n" +
                    "ew ModelStateException(state);\r\n        }\r\n    }\r\n\r\n    public static java.util." +
                    "Date getDate(String dateAsString) throws ParseException {\r\n        return new Si" +
                    "mpleDateFormat(\"yyyy-MM-dd\'T\'HH:mm:ss\").parse(dateAsString);\r\n    }\r\n\r\n    publi" +
                    "c static HttpResponse Execute(Context context, boolean isPost, String url, HashM" +
                    "ap<String,Object> parameters) throws IOException {\r\n        SharedPreferences pr" +
                    "eferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        Htt" +
                    "pResponse response;\r\n        if (isPost) {\r\n            HttpPost http = new Http" +
                    "Post(url);\r\n            http.setHeader(\"Content-Type\", \"application/x-www-form-u" +
                    "rlencoded\");    \r\n            http.setHeader(\"enctype\", \"multipart/form-data\");\r" +
                    "\n     \t    MultipartEntityBuilder entity = MultipartEntityBuilder.create(); \r\n  " +
                    "   \t    entity.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\r\n     \t   for(Entr" +
                    "y<String, Object> entry : parameters.entrySet()) {     \t\t    \r\n     \t\t    entity" +
                    ".addPart(entry.getKey(),ToPart(entry.getValue()));\r\n     \t\t}\r\n            http.s" +
                    "etEntity(entity.build());\r\n            http.setHeader(\"Cookie\", preferences.getS" +
                    "tring(\"Set-Cookie\", \"Set-Cookie\"));\r\n            http.setHeader(\"X-Requested-Wit" +
                    "h\", \"XMLHttpRequest\");\r\n            response = new DefaultHttpClient().execute(h" +
                    "ttp);\r\n        } else {\r\n\r\n            HttpGet http = new HttpGet(url + getQuery" +
                    "(parameters));\r\n            http.setHeader(\"Cookie\", preferences.getString(\"Set-" +
                    "Cookie\", \"Set-Cookie\"));\r\n            http.setHeader(\"X-Requested-With\", \"XMLHtt" +
                    "pRequest\");\r\n            response = new DefaultHttpClient().execute(http);\r\n    " +
                    "    }\r\n\r\n        Header[] cookies = response.getHeaders(\"Set-Cookie\");\r\n        " +
                    "if (cookies != null && cookies.length != 0) {\r\n            SharedPreferences.Edi" +
                    "tor edit = preferences.edit();\r\n            String combineCookie = preferences.g" +
                    "etString(\"Set-Cookie\", \"Set-Cookie\");\r\n            for (Header header : cookies)" +
                    "\r\n                combineCookie += header.getValue() + \";\";\r\n            edit.pu" +
                    "tString(\"Set-Cookie\", combineCookie);\r\n            edit.commit();\r\n        }\r\n\r\n" +
                    "        return response;\r\n    }\r\n\r\n    private static String getQuery(HashMap<St" +
                    "ring,Object> params) throws UnsupportedEncodingException {\r\n        StringBuilde" +
                    "r result = new StringBuilder();\r\n        boolean first = true;\r\n\r\n        for(En" +
                    "try<String, Object> entry : params.entrySet()) {\r\n            if (first)\r\n      " +
                    "          first = false;\r\n            else\r\n                result.append(\"&\");\r" +
                    "\n\r\n            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\r\n     " +
                    "       result.append(\"=\");\r\n            result.append(URLEncoder.encode(ToValue(" +
                    "entry.getValue()), \"UTF-8\"));\r\n        }\r\n\r\n        return result.toString();\r\n " +
                    "   }\r\n\r\n\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Workspace\mvd-endpoints\src\MvdEndPoint.Domain\Operations\Code Generate\Android_IncodingHelper.tt"

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["Namespace"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._NamespaceField = ((string)(this.Session["Namespace"]));
        NamespaceValueAcquired = true;
    }
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._NamespaceField = ((string)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class Android_IncodingHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

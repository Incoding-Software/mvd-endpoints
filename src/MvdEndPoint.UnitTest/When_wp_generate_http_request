using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace PhoneApp2.Persistanse
{
    public class HttpCommands
    {
        public async Task<string> PostAwait<T>(bool IsPost, bool isCommand, StringBuilder postData) where T : class
        {
            string url =  string.Format("http://test.incoding.biz/ru/Dispatcher/{0}",isCommand ? "Push" : "Query");
            string response = "";
            if (!IsPost)
            {
                if (postData != null)
                {
                    response = await post(Url, postData.ToString());
                    return response;
                }
                else
                {
                    HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(new System.Uri(Url));
                    
                    if (CustomCookieContainer.Cookie != null)
                    {
                        request.CookieContainer = new CookieContainer();
                        request.CookieContainer.SetCookies(new Uri(Url), CustomCookieContainer.Cookie);
                    }
                    response = await GetWebRequestCallback(request);
                    return response;
                }
            }
            else{
                response = await post(Url, postData.ToString());
                return response;
            }
        }

        private async Task<string> GetWebRequestCallback(HttpWebRequest request)
        {
            Task<WebResponse> task =  Task<WebResponse>.Factory.FromAsync(request.BeginGetResponse, request.EndGetResponse, null);
            var responseObject = await task.ContinueWith(r => r.Result);
            if (CustomCookieContainer.Cookie == null && request.CookieContainer != null && request.CookieContainer.Count != 0)
            {
                CustomCookieContainer.Cookie = request.CookieContainer.GetCookieHeader(request.RequestUri);
            }
            var responseStream = responseObject.GetResponseStream();
            var sr = new StreamReader(responseStream);
            string received = await sr.ReadToEndAsync();

            return received;
        }

        private async Task<string> post(string url, string postdata)
        {
            var request = WebRequest.Create(new Uri(url)) as HttpWebRequest;
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            request.Headers["X-Requested-With"] = "XMLHttpRequest";
            request.CookieContainer = new CookieContainer();
            byte[] data = Encoding.UTF8.GetBytes(postdata);
            request.ContentLength = data.Length;
            using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream, request.EndGetRequestStream, request))
            {
                await requestStream.WriteAsync(data, 0, data.Length);
            }
            
            string response = await GetWebRequestCallback(request);
            return response;
        }

    }
}

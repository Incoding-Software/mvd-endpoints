@using Incoding.Endpoint
<html>
<head>
    <link rel="stylesheet" href="@Url.Content("~/Content/bootstrap.css")"/>
    <link rel="stylesheet" href="@Url.Content("~/Content/endpoint.css")"/>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-1.10.0.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/underscore.min.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.form.min.js")"> </script>    
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/handlebars.min.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/incoding.framework.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/incoding.meta.language.contrib.js")"> </script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/endpoint.js")"></script>
    @*<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/default.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>*@
    <style>
        .field-validation-error {
            color: red;
        }
        .control-label {
            color: black;
        }
    </style>

    <script>
        TemplateFactory.Version = '@Guid.NewGuid().ToString()';
    </script>
</head>

<body id="api-reference">
<div id="header">
    <div class="header-section header-section-sidebar">
        <div class="logo">
        </div>
    </div>
    <div class="header-section header-section-example">
        <div id="language">
            <ul class="language-toggle">
                <li>
                    @(Html.When(JqueryBind.Change)
                          .OnSuccess(dsl =>
                                     {
                                         dsl.WithClass("method-example").JQuery.Attr.AddClass(B.Hidden);
                                         dsl.WithClass("http").JQuery.Attr.RemoveClass(B.Hidden);
                                     })
                          .AsHtmlAttributes(new { @class = "language-toggle-source", @checked = "checked", name = "language-toggle" })
                          .ToInput(HtmlInputType.Radio, "http"))
                    <label class="language-toggle-button">Http</label>
                </li>
                <li>
                    @(Html.When(JqueryBind.Change)
                          .OnSuccess(dsl =>
                                     {
                                         dsl.WithClass("method-example").JQuery.Attr.AddClass(B.Hidden);
                                         dsl.WithClass("android").JQuery.Attr.RemoveClass(B.Hidden);
                                     })
                          .AsHtmlAttributes(new { @class = "language-toggle-source", name = "language-toggle" })
                          .ToInput(HtmlInputType.Radio, "android"))
                    <label class="language-toggle-button">Android</label>
                </li>
                <li>
                    @(Html.When(JqueryBind.Change)
                          .OnSuccess(dsl =>
                                     {
                                         dsl.WithClass("method-example").JQuery.Attr.AddClass(B.Hidden);
                                         dsl.WithClass("sandbox").JQuery.Attr.RemoveClass(B.Hidden);
                                     })
                          .AsHtmlAttributes(new { @class = "language-toggle-source", name = "language-toggle" })
                          .ToInput(HtmlInputType.Radio, "Sandbox"))
                    <label class="language-toggle-button">Sandbox</label>
                </li>
            </ul>
        </div>
    </div>
</div>
@{
    var data = Html.Dispatcher().Query(new GetMessagesQuery());
}
<div id="sidebar">
    <nav role="navigation" class="sidebar-nav">
        <ul class="sidebar-nav-items loaded">
            @{
                var isFirst = true;
            }
            @foreach (var grop in data.Where(s => !s.IsGroup)
                                      .GroupBy(s => s.Group))
            {
                <li class="expanded">
                    <a class="sidebar-nav-item expandable" href="#@grop.Key">@grop.Key</a>
                    <ul class="sidebar-nav-items loaded" data-height="160" style="height: 160px;">
                        @foreach (var item in grop)
                        {
                            <li>
                                <a class="sidebar-nav-item @(isFirst ? "selected" : "")" rel="@item.Id" href="#@item.Id">@item.Name</a>
                            </li>
                            isFirst = false;
                        }
                    </ul>
                </li>
                
            }

        </ul>
    </nav>
</div>
<div id="background">
    <div class="background-actual"></div>
</div>
<div id="content">
    @data.AsView("~/Views/Endpoint/Item_Tmpl.cshtml")
</div>
</body>

</html>
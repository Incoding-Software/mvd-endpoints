@using Incoding.Endpoint
@using Incoding.Extensions
@using Incoding.MetaLanguageContrib
@using Incoding.MvcContrib
@using Pazar.Business.Operation.AdDetails.Queries
@model Incoding.Endpoint.GetEndpointsQuery.Tmpl
@{
    using (var template = Html.Incoding().Template<GetEndpointsQuery.Response>())
    {
        string dialogId = Guid.NewGuid().ToString();

        <div id="@dialogId"></div>
        <table class="table table-bordered table-striped table-condensed">
            <thead>
                <tr>
                    <th style="width: 30px">
                        @(Html.When(JqueryBind.Click)
                              .Direct()
                              .OnSuccess(dsl =>
                                             {
                                                 dsl.WithName(Model.CheckedTypeName)
                                                    .Behaviors(inDsl =>
                                                                   {
                                                                       inDsl.Core().JQuery.Attributes.RemoveAttr(HtmlAttribute.Checked);
                                                                       inDsl.Core().JQuery.Attributes.SetAttr(HtmlAttribute.Checked).If(() => Selector.Jquery.Self());
                                                                   });
                                                 dsl.WithId(Model.AllId).Core().Trigger.Invoke(JqueryBind.InitIncoding);
                                             })
                              .AsHtmlAttributes()
                              .ToCheckBox(false))
                    </th>
                    <th class="col-xs-3">Name</th>
                    <th class="col-xs-5">Url</th>
                    <th>Type</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @using (var each = template.ForEach())
                {
                    string trId = "tr" + each.For(r => r.Name);
                    <tr>
                        <td>
                            @(Html.When(JqueryBind.Change)
                                  .Direct()
                                  .OnSuccess(dsl => dsl.WithId(Model.AllId).Core().Trigger.Invoke(JqueryBind.InitIncoding))
                                  .AsHtmlAttributes(new { name = Model.CheckedTypeName, value = each.For(r => r.AssemblyQualifiedName) })
                                  .ToCheckBox(false))
                        </td>
                        <td>@each.For(r => r.Name)</td>
                        <td>
                            <a href="@each.For(r => r.Url)">
                                @each.For(r => r.Url)
                            </a>
                        </td>
                        <td>@each.For(r => r.Type)</td>
                        <td>
                            @(Html.When(JqueryBind.Click)
                                  .AjaxGet(Url.Dispatcher().Query(new GetEndpointsQuery()
                                  {
                                      Id = each.For(r => r.GUID)
                                  }).AsJson())
                                  .OnSuccess(dsl => dsl.WithId(dialogId).Behaviors(inDsl =>
                                  {
                                      string urlSandbox = Url.Dispatcher().AsView("~/Views/Endpoint/Sandbox_Item_Tmpl.cshtml");
                                      inDsl.Core().Insert.WithTemplateByUrl(urlSandbox).Html();
                                      inDsl.JqueryUI().Dialog.Open(options =>
                                      {
                                          options.Title = "Sandbox";
                                          options.Width = "500px;";
                                      });
                                  }))
                                  .AsHtmlAttributes(new { @class = "btn btn-primary" })
                                  .ToButton("Sandbox"))


                            @(Html.When(JqueryBind.InitIncoding)
                                  .Direct()
                                  .OnSuccess(dsl =>
                                  {
                                      var url = Url.Dispatcher().Query<MessagesToPackageQuery>(new
                                      {
                                          Names = each.For(r => r.AssemblyQualifiedName),
                                          BaseUrl = Selector.Jquery.Name(Model.BaseUrlName),
                                          Device = Model.DeviceName.ToName()
                                      })
                                                   .AsFile(incFileDownloadName: each.For(r => r.Name) + ".zip")
                                                   .ToBuildUrl();
                                      dsl.Self().Core().JQuery.Attributes.SetAttr(HtmlAttribute.Href, url);
                                  })
                                  .AsHtmlAttributes(new { name = Model.DownloadLinkName })
                                  .ToLink("Download"))
                        </td>
                    </tr>
                    <tr id="@trId" class="hide">
                        <td colspan="5">
                            <table class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @using (var innerEach = each.ForEach(r => r.Properties))
                                    {
                                        <tr>
                                            <td>@innerEach.For(r => r.Name)</td>
                                            <td>@innerEach.For(r => r.Type)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}